---
- name: configure SNOW user for demo environment
  hosts: 127.0.0.1
  connection: local
  become: false

  vars:

    # servicenow instance vars
    username: "{{ lookup('env', 'SN_USERNAME') }}"
    password: "{{ lookup('env', 'SN_PASSWORD') }}"
    instance: "{{ lookup('env', 'SN_HOST') }}"

    # username/password to use for new user account
    demo_username: demo_user
    demo_password: ansible123

    # role to attach to user - needs to be a valid role defined in servicenow
    role: Demo

    # whether or not this playbook run will create or cleanup the user account
    cleanup: false

  tasks:

  - name: set first name for user
    set_fact:
      first_name: "{{ ['Craig','Dafne','Nuno','Roger','Monish','Anshul','Hicham','Sean','Andrius','Tom','Colin'] | random }}"

  - name: create user with the proper servicenow role
    block:

    # This task can be moved to servicenow.itsm.api if there's ever a way to pass sysparm_input_display_value=true
    # https://github.com/ansible-collections/servicenow.itsm/issues/221
    - name: create user
      uri:
        url: "{{ instance }}/api/now/table/sys_user?sysparm_input_display_value=true"
        method: POST
        user: "{{ username }}"
        password: "{{ password }}"
        force_basic_auth: true
        headers:
          Content-Type: application/json
        body_format: json
        body:
          user_name: "{{ demo_username }}"
          user_password: "{{ demo_password }}"
          first_name: "{{ first_name }}"
          last_name: Demouser
          department: IT
          email: "{{ demo_username }}@example.com"
          title: instruqt_demo
        status_code: 201
      register: user_create
      when: not cleanup

    - name: attach role to new user
      servicenow.itsm.api:
        resource: sys_user_has_role
        action: post
        data:
          user: "{{ demo_username }}"
          role: "{{ role }}"
      register: user_role
      when: not cleanup

    - name: find user sys_id
      servicenow.itsm.api_info:
        resource: sys_user
        sysparm_query: "user_name={{ demo_username }}"
        columns:
          - user_name
          - sys_id
          - sys_created_on
      register: user_info

    - name: cleanup user
      servicenow.itsm.api:
        resource: sys_user
        action: delete
        sys_id: "{{ user_info.record[0].sys_id }}"
      register: user_delete
      when: cleanup

    rescue:

    - ansible.builtin.debug:
        msg: "Something failed, deleting user"

    - name: cleanup user
      servicenow.itsm.api:
        resource: sys_user
        action: delete
        sys_id: "{{ user_info.record[0].sys_id }}"
      register: user_delete
      when: cleanup

