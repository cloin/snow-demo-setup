- name: Retrieve catalog item details and ServiceNow request by REQ
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    req_sys_id: "{{ ansible_eda.event.payload.sys_id }}"

  tasks:
    - name: Retrieve RITM details with retries
      servicenow.itsm.api_info:
        resource: sc_req_item
        sysparm_query: request={{ req_sys_id }}
        display_value: all
        columns: [sys_id, number, description, short_description, cat_item]
      register: ritms
      until: ritms.record is defined and ritms.record | length > 0
      retries: 3
      delay: 5

    - name: Debug RITM details
      ansible.builtin.debug:
        var: ritms

    - name: Set RITM details fact
      ansible.builtin.set_fact:
        ritm_details: "{{ ritms.record }}"
        cacheable: true

    - name: Retrieve variable mappings for all RITMs
      servicenow.itsm.api_info:
        resource: sc_item_option_mtom
        sysparm_query: request_itemIN{{ ritm_details | map(attribute='sys_id.value') | join(',') }}
        columns: [request_item, sc_item_option]
      register: variable_mappings
      when: ritm_details | length > 0
      retries: 3
      delay: 5

    - name: Retrieve variable details for all mappings
      servicenow.itsm.api_info:
        resource: sc_item_option
        sysparm_query: "sys_idIN{{ variable_mappings.record | map(attribute='sc_item_option.value') | join(',') }}"
        columns: [item_option_new, value, sys_id, request_item]
      register: variable_details
      when: variable_mappings.record | length > 0

    - name: Retrieve variable names using item_option_new IDs
      servicenow.itsm.api_info:
        resource: item_option_new
        sysparm_query: "sys_idIN{{ variable_details.record | map(attribute='item_option_new.value') | join(',') }}"
        columns: [sys_id, name]
      register: variable_names
      when: variable_details.record | length > 0

    - name: Create dictionary of variable names by sys_id
      ansible.builtin.set_fact:
        variable_name_dict: "{{ dict(variable_names.record | map(attribute='sys_id') | zip(variable_names.record | map(attribute='name'))) }}"
        cacheable: true
      when: variable_names.record | length > 0

    - name: Organize variables by RITM
      ansible.builtin.set_fact:
        ritm_variables: >
          {{
            dict(
              ritm_details | map(attribute='sys_id.value') | zip(
                ritm_details | map(
                  'combine', 
                  dict(
                    variables=variable_details.record | selectattr('request_item', 'equalto', item.sys_id.value) | list | map(
                      dict(
                        name=variable_name_dict[item.item_option_new.value],
                        value=item.value
                      )
                    )
                  )
                )
              )
            )
          }}
      when: ritm_details | length > 0

    - name: Consolidate all facts and original event into set_stats
      ansible.builtin.set_stats:
        data:
          enriched_event: >
            {{
              {
                'req_sys_id': req_sys_id | default('Unknown Request ID'),
                'ritm_details': ritm_details | default([]),
                'ritm_variables': ritm_variables | default({}),
                'catalog_item': ritm_details[0].cat_item.display_value | default('Unknown Item')
              }
            }}
          original_event: "{{ ansible_eda.event | default({}) }}"

    - name: Display enriched event details
      ansible.builtin.debug:
        var: enriched_event
